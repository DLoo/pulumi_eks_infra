
---
apiVersion: v1
kind: Secret
metadata:
  name: postgres-credentials
  namespace: genai
type: Opaque
data:
  # Replace with your base64 encoded values
  # echo -n 'your_postgres_user' | base64
  # echo -n 'your_strong_password' | base64
  # echo -n 'openwebui_db' | base64
  POSTGRES_USER: ZGJhZG1pbg== # dbadmin
  POSTGRES_PASSWORD: RG9uZTgyMTI= # Done8212
  POSTGRES_DB: b3BlbndlYnVp # openwebui

---
apiVersion: v1
kind: Service
metadata:
  name: postgres-svc
  namespace: genai
  labels:
    app: postgres
spec:
  ports:
    - port: 5432
      name: postgres
  clusterIP: None
  selector:
    app: postgres

---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: postgres
  namespace: genai
  labels:
    app: postgres
  annotations:
    deletion.kubernetes.io/protect: "true" 
spec:
  serviceName: "postgres-svc"
  replicas: 1
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
      annotations:
        # This hook runs a command INSIDE the 'postgres' container before backing it up.
        pre.hook.backup.velero.io/container: postgres
        pre.hook.backup.velero.io/command: '["/bin/sh", "-c", "psql -U \"$POSTGRES_USER\" -d \"$POSTGRES_DB\" -c \"CHECKPOINT;\""]'
    spec:
      terminationGracePeriodSeconds: 10
      volumes: # <-- MODIFIED: Define volume using existing PVC
        - name: postgres-data
          persistentVolumeClaim:
            claimName: ebs-claim # Reference the pre-defined ebs-claim
      containers:
        - name: postgres
          image: postgres:15
          imagePullPolicy: IfNotPresent
          ports:
            - name: postgres
              containerPort: 5432
              protocol: TCP
          env:
            - name: POSTGRES_USER
              valueFrom:
                secretKeyRef:
                  name: postgres-credentials
                  key: POSTGRES_USER
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: postgres-credentials
                  key: POSTGRES_PASSWORD
            - name: POSTGRES_DB
              valueFrom:
                secretKeyRef:
                  name: postgres-credentials
                  key: POSTGRES_DB
            - name: PGDATA
              value: /var/lib/postgresql/data/pgdata
          volumeMounts:
            - name: postgres-data # Mount the volume defined above
              mountPath: /var/lib/postgresql/data
          livenessProbe:
            exec:
              command: # <-- MODIFIED PROBE
                - /bin/sh
                - -c
                - "pg_isready -q -h localhost -U \"$POSTGRES_USER\" -d \"$POSTGRES_DB\""
            initialDelaySeconds: 45 # Increased slightly
            timeoutSeconds: 5
            periodSeconds: 10
            failureThreshold: 3
          readinessProbe:
            exec:
              command: # <-- MODIFIED PROBE
                - /bin/sh
                - -c
                - "pg_isready -q -h localhost -U \"$POSTGRES_USER\" -d \"$POSTGRES_DB\""
            initialDelaySeconds: 10 # Increased slightly
            timeoutSeconds: 3
            periodSeconds: 5
            successThreshold: 1
  # volumeClaimTemplates: # <-- REMOVED: No longer needed as we use an existing PVC

