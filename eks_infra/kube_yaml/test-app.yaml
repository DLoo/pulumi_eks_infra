# test-app.yaml
---
# 1. A namespace to keep our test resources tidy
apiVersion: v1
kind: Namespace
metadata:
  name: test-app
  # Add a label for Velero to easily find and back up this namespace
  labels:
    backup-by: velero

---
# 2. A PersistentVolumeClaim for stateful storage (EBS gp3)
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: ebs-claim
  namespace: test-app
spec:
  accessModes:
    - ReadWriteOnce # Typical for block storage like EBS
  storageClassName: gp3 # This MUST match the StorageClass you created
  resources:
    requests:
      storage: 1Gi

---
# 3. A PersistentVolumeClaim for shared storage (EFS)
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: efs-claim
  namespace: test-app
spec:
  accessModes:
    - ReadWriteMany # The key feature of EFS
  storageClassName: efs-sc # This MUST match the EFS StorageClass
  resources:
    requests:
      storage: 1Gi

---
# 4. A simple web server Deployment that uses both volumes
apiVersion: apps/v1
kind: Deployment
metadata:
  name: web-server
  namespace: test-app
spec:
  replicas: 2
  selector:
    matchLabels:
      app: web-server
  template:
    metadata:
      labels:
        app: web-server
    spec:
      containers:
        - name: web
          image: nginxdemos/hello:plain-text # A simple image that shows hostname
          ports:
            - containerPort: 80
          volumeMounts:
            - name: ebs-storage # Mount the EBS volume
              mountPath: /data/ebs
            - name: efs-storage # Mount the EFS volume
              mountPath: /data/efs
      volumes:
        - name: ebs-storage
          persistentVolumeClaim:
            claimName: ebs-claim # Link to the EBS PVC
        - name: efs-storage
          persistentVolumeClaim:
            claimName: efs-claim # Link to the EFS PVC

---
# 5. A Service to expose the Deployment inside the cluster
apiVersion: v1
kind: Service
metadata:
  name: web-server-svc
  namespace: test-app
spec:
  selector:
    app: web-server
  ports:
    - protocol: TCP
      port: 80
      targetPort: 80

---
# 6. An Ingress to expose the Service to the internet via an AWS ALB
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: web-server-ingress
  namespace: test-app
  annotations:
    # This tells Kubernetes to use the AWS Load Balancer Controller
    # kubernetes.io/ingress.class: alb
    # This defines the scheme of the load balancer
    alb.ingress.kubernetes.io/scheme: internet-facing
    # This defines the type of traffic the ALB will listen for
    alb.ingress.kubernetes.io/target-type: ip
    # This tells cert-manager to use our self-signed issuer to get a cert
    cert-manager.io/cluster-issuer: selfsigned-issuer
spec:
  ingressClassName: alb
  # This section enables TLS on the ALB using the cert from cert-manager
  tls:
    - hosts:
        - testapp.example.com # A dummy hostname
      secretName: test-app-tls # cert-manager will create this secret for us
  rules:
    - http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: web-server-svc
                port:
                  number: 80