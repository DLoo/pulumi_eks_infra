# genai.yaml
# ---

---
# 4. A simple web server Deployment that uses both volumes
apiVersion: apps/v1
kind: Deployment
metadata:
  name: open-webui
  namespace: chatai
spec:
  replicas: 1
  selector:
    matchLabels:
      app: open-webui
  template:
    metadata:
      labels:
        app: open-webui
    spec:
      initContainers:
        - name: wait-for-postgres
          image: busybox:1.36
          command: ['sh', '-c']
          args:
          - |
            echo "Waiting for PostgreSQL to be ready..."
            until nc -zv postgres-0.postgres-svc.chatai.svc.cluster.local 5432; do
              echo "PostgreSQL not ready yet, sleeping for 5s..."
              sleep 5
            done
            echo "PostgreSQL is ready!"
          env:
          # --- FIX: These are now spelled correctly as POSTGRES ---
          - name: PG_USER
            valueFrom:
              secretKeyRef:
                name: postgres-credentials
                key: POSTGRES_USER
          - name: PG_PASSWORD
            valueFrom:
              secretKeyRef:
                name: postgres-credentials
                key: POSTGRES_PASSWORD
          - name: PG_DB
            valueFrom:
              secretKeyRef:
                name: postgres-credentials
                key: POSTGRES_DB

      containers:
        - name: open-webui
          image: ghcr.io/open-webui/open-webui:main # A simple image that shows hostname
          command: ["/bin/sh", "-c"]
          args:
            - |
              # Construct and export DATABASE_URL using shell expansion
              export DATABASE_URL="postgresql://${PG_USER}:${PG_PASSWORD}@postgres-0.postgres-svc.chatai.svc.cluster.local:5432/${PG_DB}"
              
              # Log the constructed URL (mask password in a real production log if desired)
              echo "Attempting to start Open WebUI with DATABASE_URL: postgresql://${PG_USER}:********@postgres-0.postgres-svc.chatai.svc.cluster.local:5432/${PG_DB}"
              
              # Execute the original Open WebUI command (from its Dockerfile CMD)
              exec uvicorn open_webui.main:app --host 0.0.0.0 --port 8080 --forwarded-allow-ips='*'
          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
          env:
            - name: WEBUI_SECRET_KEY
              value: "FhYLFE6NKta80GaJcgeswcrHeZnpi2nDw7+rsd8ElJs="
            - name: WEBUI_URL
              value: "http://chatai.app.mmh-global.com" # This is the path we defined in the Ingress
            # - name: DATABASE_URL
            #   value: "postgresql://$(PG_USER):$(PG_PASSWORD)@postgres-0.postgres-svc.chatai.svc.cluster.local:5432/$(PG_DB)"
            - name: PG_USER
              valueFrom:
                secretKeyRef:
                  name: postgres-credentials
                  key: POSTGRES_USER
            - name: PG_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: postgres-credentials
                  key: POSTGRES_PASSWORD
            - name: PG_DB
              valueFrom:
                secretKeyRef:
                  name: postgres-credentials
                  key: POSTGRES_DB
          # volumeMounts:
          #   # - name: ebs-storage # Mount the EBS volume
          #   #   mountPath: /data/ebs
          #   - name: efs-storage # Mount the EFS volume
          #     mountPath: /app/backend/data
          resources:
            requests:
              cpu: 250m
              memory: 1Gi
            limits:
              cpu: 1500m
              memory: 4Gi
          livenessProbe:
            httpGet:
              path: /healthz
              port: http
            initialDelaySeconds: 120
            periodSeconds: 10
            failureThreshold: 5
          readinessProbe:
            httpGet:
              path: /healthz
              port: http
            initialDelaySeconds: 90
            periodSeconds: 5
            successThreshold: 1
      # volumes:
      #   # - name: ebs-storage
      #   #   persistentVolumeClaim:
      #   #     claimName: ebs-claim # Link to the EBS PVC
      #   - name: efs-storage
      #     persistentVolumeClaim:
      #       claimName: efs-claim # Link to the EFS PVC

---
# 5. A Service to expose the Deployment inside the cluster
apiVersion: v1
kind: Service
metadata:
  name: open-webui-svc
  namespace: chatai
spec:
  selector:
    app: open-webui
  ports:
    - protocol: TCP
      port: 80
      targetPort: 8080

