# container-insights-agents.yaml (FINAL, CORRECTED VERSION with updated image path)
apiVersion: v1
kind: Namespace
metadata:
  name: amazon-cloudwatch
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: cluster-info
  namespace: amazon-cloudwatch
data:
  cluster.name: eks-mmh-sg-cluster
  logs.region: ap-southeast-1
---
apiVersion: v1
data:
  cwagentconfig.json: |
    {
      "agent": {
        "region": "ap-southeast-1"
      },
      "logs": {
        "metrics_collected": {
          "kubernetes": {
            "cluster_name": "eks-mmh-sg-cluster",
            "metrics_collection_interval": 60
          }
        },
        "force_flush_interval": 5
      }
    }
kind: ConfigMap
metadata:
  name: cwagentconfig
  namespace: amazon-cloudwatch
---
apiVersion: v1
data:
  fluent-bit.conf: |
    [SERVICE]
        Flush           5
        Daemon          Off
        Log_Level       info
        Parsers_File    /fluent-bit/parsers/parsers.conf
        HTTP_Server     On
        HTTP_Listen     0.0.0.0
        HTTP_Port       2020
        Health_Check    On

    [INPUT]
        Name                tail
        Tag                 application.*
        Path                /var/log/containers/*.log
        Exclude_Path        /var/log/containers/cloudwatch-agent*,/var/log/containers/fluent-bit*
        Parser              docker
        DB                  /var/fluent-bit/state/flb_kube.db
        Mem_Buf_Limit       50MB
        Skip_Long_Lines     On
        Refresh_Interval    10

    [FILTER]
        Name                kubernetes
        Match               application.*
        Kube_URL            https://kubernetes.default.svc:443
        Kube_Tag_Prefix     application.var.log.containers.
        Merge_Log           On
        Keep_Log            Off
        K8S-Logging.Parser  On
        K8S-Logging.Exclude Off
        Labels              Off
        Annotations         Off

    [OUTPUT]
        Name                cloudwatch_logs
        Match               application.*
        region              ap-southeast-1
        log_group_name      /aws/containerinsights/eks-mmh-sg-cluster/application
        log_stream_prefix   from-fluent-bit-
        auto_create_group   true
        extra_user_agent    container-insights

    [OUTPUT]
        Name                cloudwatch_logs
        Match               dataplane.*
        region              ap-southeast-1
        log_group_name      /aws/containerinsights/eks-mmh-sg-cluster/dataplane
        log_stream_prefix   from-fluent-bit-
        auto_create_group   true
        extra_user_agent    container-insights
        log_key             log

    [OUTPUT]
        Name                cloudwatch_logs
        Match               host.*
        region              ap-southeast-1
        log_group_name      /aws/containerinsights/eks-mmh-sg-cluster/host
        log_stream_prefix   from-fluent-bit-
        auto_create_group   true
        extra_user_agent    container-insights
        log_key             log
  parsers.conf: |
    [PARSER]
        Name        docker
        Format      json
        Time_Key    time
        Time_Format %Y-%m-%dT%H:%M:%S.%L%z
kind: ConfigMap
metadata:
  name: fluent-bit-config
  namespace: amazon-cloudwatch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: cloudwatch-agent-role
rules:
  - apiGroups: [""]
    resources:
      - pods
      - nodes
      - endpoints
      - services
      - configmaps
    verbs: ["get", "list", "watch", "create", "update"]
  - apiGroups: [""]
    resources:
      - nodes/proxy
      - nodes/stats
      - nodes/spec
      - nodes/metrics
    verbs: ["get"]
  - nonResourceURLs: ["/metrics", "/metrics/cadvisor"]
    verbs: ["get"]
  - apiGroups: ["discovery.k8s.io"]
    resources:
      - endpointslices
    verbs: ["get", "list", "watch"]
  - apiGroups: ["coordination.k8s.io"]
    resources:
      - leases
    verbs: ["create", "get", "list", "update", "watch"]
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: cloudwatch-agent
  namespace: amazon-cloudwatch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: cloudwatch-agent-role-binding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cloudwatch-agent-role
subjects:
  - kind: ServiceAccount
    name: cloudwatch-agent
    namespace: amazon-cloudwatch
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: fluent-bit
  namespace: amazon-cloudwatch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: fluent-bit-role-binding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cloudwatch-agent-role
subjects:
  - kind: ServiceAccount
    name: fluent-bit
    namespace: amazon-cloudwatch
---
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: cloudwatch-agent
  namespace: amazon-cloudwatch
spec:
  selector:
    matchLabels:
      name: cloudwatch-agent
  template:
    metadata:
      labels:
        name: cloudwatch-agent
    spec:
      containers:
      - env:
        - name: HOST_IP
          valueFrom:
            fieldRef:
              fieldPath: status.hostIP
        - name: HOST_NAME
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
        - name: K8S_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        image: public.ecr.aws/cloudwatch-agent/cloudwatch-agent:latest
        imagePullPolicy: Always
        name: cloudwatch-agent
        resources:
          limits:
            cpu: 200m
            memory: 200Mi
          requests:
            cpu: 200m
            memory: 200Mi
        volumeMounts:
        - mountPath: /etc/cwagentconfig
          name: cwagentconfig
        - mountPath: /rootfs
          name: rootfs
          readOnly: true
        - mountPath: /var/run/docker.sock
          name: dockersock
          readOnly: true
        - mountPath: /var/lib/docker
          name: varlibdocker
          readOnly: true
        - mountPath: /sys
          name: sys
          readOnly: true
        - mountPath: /dev/disk
          name: devdisk
          readOnly: true
      serviceAccountName: cloudwatch-agent
      terminationGracePeriodSeconds: 60
      volumes:
      - configMap:
          name: cwagentconfig
        name: cwagentconfig
      - hostPath:
          path: /
        name: rootfs
      - hostPath:
          path: /var/run/docker.sock
        name: dockersock
      - hostPath:
          path: /var/lib/docker
        name: varlibdocker
      - hostPath:
          path: /sys
        name: sys
      - hostPath:
          path: /dev/disk
        name: devdisk
  updateStrategy:
    type: RollingUpdate
---
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: fluent-bit
  namespace: amazon-cloudwatch
  labels:
    k8s-app: fluent-bit
spec:
  selector:
    matchLabels:
      k8s-app: fluent-bit
  template:
    metadata:
      labels:
        k8s-app: fluent-bit
    spec:
      containers:
      - name: fluent-bit
        # CORRECTED IMAGE PATH AS PER YOUR FINDING
        image: public.ecr.aws/aws-observability/aws-for-fluent-bit:latest
        imagePullPolicy: Always
        ports:
          - containerPort: 2020
        resources:
          limits:
            memory: 200Mi
          requests:
            cpu: 100m
            memory: 100Mi
        volumeMounts:
        - name: fluentbitstate
          mountPath: /var/fluent-bit/state
        - name: fluentbitconfig
          mountPath: /fluent-bit/etc/
        - name: varlog
          mountPath: /var/log
          readOnly: true
        - name: varlibdockercontainers
          mountPath: /var/lib/docker/containers
          readOnly: true
        - name: runlogjournal
          mountPath: /run/log/journal
          readOnly: true
        - name: dmesg
          mountPath: /var/log/dmesg
          readOnly: true
      terminationGracePeriodSeconds: 10
      serviceAccountName: fluent-bit
      volumes:
      - name: fluentbitstate
        hostPath:
          path: /var/fluent-bit/state
      - name: fluentbitconfig
        configMap:
          name: fluent-bit-config
      - name: varlog
        hostPath:
          path: /var/log
      - name: varlibdockercontainers
        hostPath:
          path: /var/lib/docker/containers
      - name: runlogjournal
        hostPath:
          path: /run/log/journal
      - name: dmesg
        hostPath:
          path: /var/log/dmesg
  updateStrategy:
    type: RollingUpdate